version: '3.7'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: backend # Use an image built from the specified dockerfile in the 'backend' directory.
      dockerfile: Dockerfile
    env_file: ./.env
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - flowerknower-db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:postgresql://flowerknower-db:5432/$POSTGRES_DATABASE
      SPRING_DATASOURCE_USERNAME: $POSTGRES_USER
      SPRING_DATASOURCE_PASSWORD: $POSTGRES_PASSWORD
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend


  # Frontend Service
  app-client:
    build:
      context: frontend # Use an image built from the specified dockerfile in the 'frontend' directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://127.0.0.1:8080/api/v1
    ports:
      - "9090:80" # Map the exposed port 80 on the container to port 9090 on the host machine
    restart: always
    depends_on:
      - app-server
    networks:
      - frontend


  # Database Service (PostgreSQL)
  flowerknower-db:
    image: "postgres:15.2-alpine"
    container_name: flowerknower-db
    restart: always
    env_file: ./.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=$POSTGRES_DATABASE
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      - backend


# Volumes
volumes:
  postgres_data:

# Networks to be created to facilitate communication between containers
networks:
  frontend:
  backend:
